import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {
			"terraform_remote_state": {
				"ecc_view": {
					0: {
						"attr": {
							"backend": "remote",
							"config": {
								"organization": "FMR_BU1",
								"workspaces": {
									"name": "ECC-config_2019-march-01",
								},
							},
							"defaults": null,
							"outputs": {
								"database_subnet_id": "subnet-08f0c05a82e4d2243",
								"services_subnet_id": "subnet-0fd45f43fcb6227be",
							},
							"workspace": "default",
						},
						"depends_on": [],
						"id":         "",
						"tainted":    false,
					},
				},
			},
		},
		"path":      [],
		"resources": {},
	},

	"module.ec2-instance": {
		"data": {},
		"path": [
			"ec2-instance",
		],
		"resources": {},
	},
}

module_paths = [
	[],
	[
		"ec2-instance",
	],
]

terraform_version = "0.12.21"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
